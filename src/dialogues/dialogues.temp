/*
** EPITECH PROJECT, 2024
** PirateQuest
** File description:
** dialogues.c
*/

/*
 * exemple of a dialogue file:
 *
```tutorials_1.pqd
    [ME]=>sentence - 5
    Ou suis-je OMG ça tourne vraiment très mal

    [ME]=>sentence - 3
    OU SUIS-JE ????

    [ME]=>question - 5
    Est-ce que je suis en train de rêver ?
    |=> "Oui je rêve, je suis en train de rêver..."
    |=> "Non je ne rêve pas, je suis bien réveillé..."
```
 * [ME] corresponds a qui parle, sentence/question corresponds to the type of dialogue, 5 corresponds to the time the dialogue will be displayed
 * |=> corresponds to the possible answers to the question
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "../../include/settings.h"

typedef enum {
    SENTENCE,
    QUESTION
} dialogue_type_t;

typedef enum {
    ME,
    OTHER
} dialogue_speaker_t;

typedef struct dialogue_s {
    dialogue_speaker_t speaker;
    dialogue_type_t type;
    char *content;
    int time;
    char **answers;
} dialogue_t;

dialogue_t *parse_dialogue(char *line)
{
    dialogue_t *dialogue = malloc(sizeof(dialogue_t));
    char *content = NULL;
    char *answers = NULL;

    dialogue->speaker = line[1] == 'M' ? ME : OTHER;
    dialogue->type = line[4] == 's' ? SENTENCE : QUESTION;
    dialogue->time = atoi(line + 11);
    content = strtok(line + 14, "\n");
    if (content != NULL) {
        dialogue->content = my_strdup(content);
    } else {
        free(dialogue);
        return NULL;
    }
    if (dialogue->type == QUESTION) {
        answers = strtok(NULL, "\n");
        if (answers != NULL) {
            dialogue->answers = my_str_to_word_array(answers, '|');
        } else {
            free(dialogue->content);
            free(dialogue);
            return NULL;
        }
    }
    return dialogue;
}

dialogue_t **parse_dialogues(char *filepath)
{
    FILE *fd = fopen(filepath, "r");
    char *line = NULL;
    size_t len = 0;
    size_t size;
    dialogue_t **dialogues = malloc(sizeof(dialogue_t *));
    int i = 0;

    for (size = getline(&line, &len, fd); size != -1;
        size = getline(&line, &len, fd)) {
        line[size - 1] = '\0';
        dialogues[i] = parse_dialogue(line);
        i++;
        dialogues = realloc(dialogues, sizeof(dialogue_t *) * (i + 1));
    }
    dialogues[i] = NULL;
    fclose(fd);
    return dialogues;
}

void free_dialogues(dialogue_t **dialogues)
{
    for (int i = 0; dialogues[i]; i++) {
        free(dialogues[i]->content);
        if (dialogues[i]->type == QUESTION) {
            for (int j = 0; dialogues[i]->answers[j]; j++)
                free(dialogues[i]->answers[j]);
            free(dialogues[i]->answers);
        }
        free(dialogues[i]);
    }
    free(dialogues);
}

void display_dialogue(dialogue_t *dialogue)
{
    printf("%s\n", dialogue->content);
    if (dialogue->type == QUESTION) {
        for (int i = 0; dialogue->answers[i]; i++)
            printf("%d. %s\n", i + 1, dialogue->answers[i]);
    }
}

int main(void)
{
    dialogue_t **dialogues = parse_dialogues("tutorials_1.pqd");

    for (int i = 0; dialogues[i]; i++) {
        display_dialogue(dialogues[i]);
    }
    free_dialogues(dialogues);
    return 0;
}
